services:
  postgres:
    container_name: postgres-smit
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - .env.compose.pg
    volumes:
      - postgres_storage_new:/var/lib/postgresql/data
    networks:
      - custom
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__NAME}" ]
#      test: [ "CMD-SHELL", "pg_isready -U newuser -d new_smit_db" ]
      interval: 10s
      timeout: 5s
      retries: 3


  postgres_exporter:
    platform: linux/x86_64
    container_name: postgres_exporter-smit
    image: wrouesnel/postgres_exporter:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # проверить почему не подтягиваются env
#      DATA_SOURCE_URI: "postgres://${DB__USER}:${DB__PASSWORD}@${DB__HOST}:${DB__PORT}/${DB__NAME}?sslmode=disable"
      DATA_SOURCE_NAME: "postgres://newuser:dbpass@postgres:5432/new_smit_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - custom


  api:
    container_name: api-smit
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ['/app_example/docker/app.sh']
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
    ports:
      - "8000:8000"
    networks:
      - custom
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/check_database"]
      interval: 30s
      timeout: 5s
      retries: 3

  zookeeper:
    platform: linux/x86_64
    container_name: zookeeper-smit
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - custom

  kafka:
    platform: linux/x86_64
    container_name: kafka-smit
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - custom


  kafka-ui:
    container_name: kafka-ui-smit
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - custom

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    networks:
      - custom

  prometheus:
    platform: linux/x86_64
    container_name: prometheus-smit
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '19090:9090'
    networks:
      - custom
    depends_on:
      - api

  grafana:
    platform: linux/x86_64
    container_name: "grafana"
    image: grafana/grafana-oss:latest
    #    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - '13000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana-config:/etc/grafana
    networks:
      - custom
    depends_on:
      - prometheus

volumes:
  postgres_storage_new:
    driver: local
  grafana_data:
    driver: local
  grafana-config:
    driver: local
  prometheus-data:
    driver: local

networks:
  custom:
    driver: bridge